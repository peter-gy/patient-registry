{"version":3,"sources":["components/layout.tsx","context/PatientContext.tsx","components/patient-list.tsx","actions/PatientActions.ts","components/filtered-patient-list.tsx","components/add-patient.tsx","components/patient-master.tsx","components/patient-detail.tsx","components/not-found.tsx","App.tsx","index.tsx"],"names":["Header","AntLayout","Content","Footer","Layout","children","style","minHeight","to","color","padding","textAlign","initialState","patients","patientReducer","state","action","type","payload","filter","patient","socialSecNum","PatientContext","React","createContext","PatientProvider","useReducer","dispatch","Provider","value","PatientItem","useContext","patientName","firstName","lastName","history","useHistory","Item","actions","title","DeleteTwoTone","onClick","e","stopPropagation","fontSize","push","avatar","loading","active","Meta","src","alt","description","PatientList","pagination","pageSize","size","dataSource","renderItem","item","FilteredPatientList","useState","displayedPatients","setDisplayedPatients","lastNameInputRef","useRef","getFilteredPatients","query","current","p","toLowerCase","includes","useEffect","justify","align","marginBottom","xs","span","sm","md","lg","xl","xxl","ref","placeholder","prefix","UserOutlined","onChange","event","target","AddPatientModal","visible","onAdd","onCancel","Form","useForm","form","itemNoEmptyRule","label","required","message","okText","cancelText","onOk","validateFields","then","resetFields","catch","info","notification","JSON","stringify","layout","name","rules","AddPatient","isModalVisible","setIsModalVisible","shape","icon","PlusOutlined","addPatient","PatientMaster","PatientDetail","bordered","email","phone","PatientDetailPage","match","useRouteMatch","patientToDisplay","find","params","marginTop","RollbackOutlined","NotFound","App","exact","path","component","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.31903871.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout as AntLayout } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst { Header, Content, Footer } = AntLayout;\n\nconst Layout: React.FC = ({ children }) => {\n  return (\n    <AntLayout style={{ minHeight: '100vh' }}>\n      <Header>\n        <Link to=\"/\">\n          <h1 style={{ color: 'white' }}>Patient Registry</h1>\n        </Link>\n      </Header>\n      <Content style={{ padding: 10 }}>{children}</Content>\n      <Footer style={{ textAlign: 'center' }}>\n        Created by PÃ©ter Ferenc Gyarmati\n      </Footer>\n    </AntLayout>\n  );\n};\n\nexport default Layout;\n","import React, { useReducer } from 'react';\nimport { PatientAction, PatientState, PatientContextModel } from '../interface';\nimport patients from '../data/patients.json';\n\nconst initialState: PatientState = {\n  patients: patients,\n};\n\nconst patientReducer = (\n  state: PatientState,\n  action: PatientAction\n): PatientState => {\n  switch (action.type) {\n    case 'ADD':\n      return {\n        ...state,\n        patients: [...state.patients, action.payload],\n      };\n    case 'DELETE':\n      return {\n        ...state,\n        patients: state.patients.filter(\n          (patient) => patient.socialSecNum !== action.payload\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const PatientContext = React.createContext({} as PatientContextModel);\n\nexport const PatientProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(patientReducer, initialState);\n  return (\n    <PatientContext.Provider value={{ state, dispatch }}>\n      {children}\n    </PatientContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport { List, Avatar, Skeleton, Tooltip } from 'antd';\nimport { DeleteTwoTone } from '@ant-design/icons';\nimport { Patient } from '../interface';\nimport { PatientContext } from '../context/PatientContext';\nimport { deletePatient } from '../actions/PatientActions';\nimport { useHistory } from 'react-router-dom';\n\ntype ListProps = {\n  patients: Patient[];\n};\n\n/**\n * Displays a list of patients\n */\nconst PatientList: React.FC<ListProps> = ({ patients }) => {\n  return (\n    <>\n      <List\n        pagination={{ pageSize: 7 }}\n        size=\"small\"\n        dataSource={patients}\n        renderItem={(item) => <PatientItem patient={item} />}\n      />\n    </>\n  );\n};\n\ntype ItemProps = {\n  patient: Patient;\n};\n\n/**\n * Displays a single patient\n */\nconst PatientItem: React.FC<ItemProps> = ({ patient }) => {\n  const { dispatch } = useContext(PatientContext);\n  const patientName = `${patient.firstName} ${patient.lastName}`;\n  const onDelete = (e: React.MouseEvent<HTMLInputElement>) => {\n    e.stopPropagation(); // stop the default 'show detail' behaviour\n    dispatch(deletePatient(patient.socialSecNum));\n  };\n\n  const history = useHistory();\n  const onClick = () => history.push(`/patients/${patient.socialSecNum}`);\n  return (\n    <List.Item\n      actions={[\n        <Tooltip title=\"Delete\">\n          {<DeleteTwoTone onClick={onDelete} style={{ fontSize: 24 }} />}\n        </Tooltip>,\n      ]}\n      onClick={onClick}\n    >\n      <Skeleton avatar title={false} loading={false} active>\n        <List.Item.Meta\n          avatar={\n            <Avatar\n              src={`https://eu.ui-avatars.com/api/?background=074075&color=fff&name=${patientName}`}\n              alt={patientName}\n            />\n          }\n          title={patientName}\n          description={patient.socialSecNum}\n        />\n      </Skeleton>\n    </List.Item>\n  );\n};\n\nexport default PatientList;\n","import { PatientAction, Patient } from '../interface';\n\nexport const addPatient = (patient: Patient): PatientAction => ({\n  type: 'ADD',\n  payload: patient,\n});\n\nexport const deletePatient = (socialSecNum: string): PatientAction => ({\n  type: 'DELETE',\n  payload: socialSecNum,\n});\n","import React, { useContext, useEffect, useState, useRef } from 'react';\nimport PatientList from './patient-list';\nimport { Patient } from '../interface';\nimport { PatientContext } from '../context/PatientContext';\nimport { Row, Col, Input } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\n\n/**\n * Wraps a PatientList and takes care of the filtering functionality\n */\nconst FilteredPatientList: React.FC = () => {\n  // Load Patients from the context\n  const {\n    state: { patients },\n  } = useContext(PatientContext);\n  // Use a different state to display filtered patients\n  const [displayedPatients, setDisplayedPatients] = useState(patients);\n  // Get a ref to the input field to use its value when a new patient is added\n  const lastNameInputRef = useRef<Input>(null);\n\n  // not passing a predicate as a parameter, as only querying by last name is required\n  const getFilteredPatients = (\n    patients: Patient[],\n    query = lastNameInputRef.current?.state.value\n  ): Patient[] => {\n    return query\n      ? patients.filter((p) =>\n          p.lastName.toLowerCase().includes(query.toLowerCase())\n        ) // filter list with case-insensitive check\n      : patients; // return all the patients on undefined query string\n  };\n\n  // Update the list of displayed patients when the context changes\n  useEffect(() => {\n    setDisplayedPatients(getFilteredPatients(patients));\n  }, [patients]);\n\n  return (\n    <>\n      <Row justify=\"space-around\" align=\"middle\" style={{ marginBottom: 10 }}>\n        <Col\n          xs={{ span: 24 }}\n          sm={{ span: 20 }}\n          md={{ span: 16 }}\n          lg={{ span: 12 }}\n          xl={{ span: 8 }}\n          xxl={{ span: 4 }}\n        >\n          <Input\n            ref={lastNameInputRef}\n            placeholder=\"Search by last name...\"\n            prefix={<UserOutlined />}\n            onChange={(event) =>\n              setDisplayedPatients(\n                getFilteredPatients(patients, event.target.value)\n              )\n            }\n          />\n        </Col>\n      </Row>\n      <Row justify=\"space-around\" align=\"middle\">\n        <Col span={24}>\n          <PatientList patients={displayedPatients} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default FilteredPatientList;\n","import React, { useState, useContext } from 'react';\nimport {\n  Row,\n  Col,\n  Tooltip,\n  Button,\n  Modal,\n  notification,\n  Form,\n  Input,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Patient } from '../interface';\nimport { PatientContext } from '../context/PatientContext';\nimport { addPatient } from '../actions/PatientActions';\n\n/**\n * Handles the 'ADD' action dispatching\n */\nconst AddPatient = () => {\n  const { dispatch } = useContext(PatientContext);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const showModal = () => setIsModalVisible(true);\n  const onAdd = (patient: Patient) => {\n    dispatch(addPatient(patient));\n    setIsModalVisible(false);\n  };\n  const handleCancel = () => setIsModalVisible(false);\n  return (\n    <>\n      <Row justify=\"space-around\" align=\"middle\" style={{ marginBottom: 10 }}>\n        <Col>\n          <Tooltip title=\"Add New Patient\">\n            <Button\n              type=\"primary\"\n              shape=\"circle\"\n              size=\"large\"\n              icon={<PlusOutlined />}\n              onClick={showModal}\n            />\n          </Tooltip>\n        </Col>\n      </Row>\n      <AddPatientModal\n        visible={isModalVisible}\n        onAdd={onAdd}\n        onCancel={handleCancel}\n      />\n    </>\n  );\n};\n\ntype Props = {\n  visible: boolean;\n  onAdd: (patient: Patient) => void;\n  onCancel: () => void;\n};\n\n/**\n * Defines the modal and the form for creating patients\n */\nconst AddPatientModal: React.FC<Props> = ({ visible, onAdd, onCancel }) => {\n  const [form] = Form.useForm();\n  const onOk = () => {\n    form\n      .validateFields()\n      .then((patient) => {\n        form.resetFields();\n        onAdd(patient);\n      })\n      .catch((info) => {\n        notification['error']({\n          message: 'Validation Error',\n          description: JSON.stringify(info),\n        });\n      });\n  };\n  const itemNoEmptyRule = (label: string) => ({\n    required: true,\n    message: `Please input the ${label} of the patient!`,\n  });\n  return (\n    <Modal\n      visible={visible}\n      title=\"Add New Patient\"\n      okText=\"Add Patient\"\n      cancelText=\"Cancel\"\n      onCancel={onCancel}\n      onOk={onOk}\n    >\n      <Form form={form} layout=\"vertical\" name=\"add_patient_form\">\n        <Form.Item\n          name=\"firstName\"\n          label=\"First name\"\n          rules={[itemNoEmptyRule('first name')]}\n        >\n          <Input placeholder=\"John\" />\n        </Form.Item>\n        <Form.Item\n          name=\"lastName\"\n          label=\"Last name\"\n          rules={[itemNoEmptyRule('last name')]}\n        >\n          <Input placeholder=\"Doe\" />\n        </Form.Item>\n        <Form.Item\n          name=\"socialSecNum\"\n          label=\"Social security number\"\n          rules={[itemNoEmptyRule('social security number')]}\n        >\n          <Input placeholder=\"8440135432\" />\n        </Form.Item>\n        <Form.Item\n          name=\"email\"\n          label=\"Email address\"\n          rules={[itemNoEmptyRule('email address')]}\n        >\n          <Input placeholder=\"john.doe@domain.com\" />\n        </Form.Item>\n        <Form.Item\n          name=\"phone\"\n          label=\"Phone number\"\n          rules={[itemNoEmptyRule('phone number')]}\n        >\n          <Input placeholder=\"478-722-8413\" />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default AddPatient;\n","import React from 'react';\nimport Layout from './layout';\nimport FilteredPatientList from './filtered-patient-list';\nimport AddPatient from './add-patient';\n\n/**\n * Master-view\n */\nconst PatientMaster: React.FC = () => {\n  return (\n    <Layout>\n      <AddPatient />\n      <FilteredPatientList />\n    </Layout>\n  );\n};\n\nexport default PatientMaster;\n","import React, { useContext } from 'react';\nimport { Descriptions, Button } from 'antd';\nimport { RollbackOutlined } from '@ant-design/icons';\nimport Layout from './layout';\nimport { Patient } from '../interface';\nimport { PatientContext } from '../context/PatientContext';\nimport { useRouteMatch, useHistory } from 'react-router-dom';\n\nconst PatientDetailPage: React.FC = () => {\n  const match = useRouteMatch<{ socialSecNum: string }>(\n    '/patients/:socialSecNum'\n  );\n\n  const {\n    state: { patients },\n  } = useContext(PatientContext);\n\n  const patientToDisplay = patients.find(\n    (p) => p.socialSecNum === match?.params.socialSecNum\n  );\n\n  const history = useHistory();\n  const onReturn = () => history.push('/');\n\n  return (\n    <Layout>\n      <PatientDetail patient={patientToDisplay} />\n      <Button\n        style={{ marginTop: 10 }}\n        onClick={onReturn}\n        type=\"primary\"\n        size=\"large\"\n        icon={<RollbackOutlined />}\n      />\n    </Layout>\n  );\n};\n\ntype PatientDetailProps = {\n  patient: Patient | undefined;\n};\n\nconst PatientDetail: React.FC<PatientDetailProps> = ({ patient }) => {\n  const history = useHistory();\n  if (!patient) history.push('/not-found');\n  return (\n    <Descriptions title=\"Patient Info\" layout=\"vertical\" bordered>\n      <Descriptions.Item label=\"Social security number\">\n        {patient?.socialSecNum}\n      </Descriptions.Item>\n      <Descriptions.Item label=\"First name\">\n        {patient?.firstName}\n      </Descriptions.Item>\n      <Descriptions.Item label=\"Last name\">\n        {patient?.lastName}\n      </Descriptions.Item>\n      <Descriptions.Item label=\"Email address\">\n        {patient?.email}\n      </Descriptions.Item>\n      <Descriptions.Item label=\"Phone number\">\n        {patient?.phone}\n      </Descriptions.Item>\n    </Descriptions>\n  );\n};\n\nexport default PatientDetailPage;\n","import React from 'react';\nimport Layout from './layout';\n\n/**\n * Master-view\n */\nconst NotFound: React.FC = () => {\n  return (\n    <Layout>\n      <h1>Page Not Found</h1>\n    </Layout>\n  );\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PatientMaster from './components/patient-master';\nimport PatientDetailPage from './components/patient-detail';\nimport NotFound from './components/not-found';\n\nimport './styles/App.css';\n\n/**\n * Master-view\n */\nconst App: React.FC = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={PatientMaster} />\n      <Route path=\"/patients/:socialSecNum\" component={PatientDetailPage} />\n      <Route path=\"/not-found\" component={NotFound} />\n      <Route component={PatientMaster} />\n    </Switch>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { PatientProvider } from './context/PatientContext';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"https://peter-gy.github.io/patient-registry\">\n      <PatientProvider>\n        <App />\n      </PatientProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}